from itertools import groupby
from typing import Collection
from bauhaus import Encoding, proposition, constraint
from bauhaus.utils import count_solutions
import random
import pprint

# Encoding that will store all of your constraints
E = Encoding()

rows = 3
columns = 7
games = []
@proposition(E)
class game:
    def __init__(self,team1,team2):
        self.t1 = team1
        self.t2 = team2
    
    def team1(self):
        return self.t1
    def team2(self):
        return self.t2

    def __repr__(self) -> str:
        return f"{self.t1 + 1} vs {self.t2 + 1}"

@proposition(E)
class day:
    def __init__(self,g1,g2,g3,day_num):
        self.g1 = g1
        self.g2 = g2
        self.g3 = g3
        self.day_num = day_num
    
    def game1(self):
        return self.g1

    def game2(self):
        return self.g2

    def game3(self):
        return self.g3

    def day(self):
        return self.day_num

    def __repr__(self) -> str:
        return f"Day{self.day_num + 1}: Game 1 = {self.g1}, Game 2 = {self.g2}, Game 3 = {self.g3} \n"


@proposition(E)
class weekp:
    def __init__(self,days, week_num):
        self.days = days
        self.week_n = week_num

    def days(self):
        return self.days
    
    def week_num(self):
        return self.week_n

    def __repr__(self) -> str:
        return f"Week{self.week_n + 1}:\n {self.days}"

for i in range(8):
    for j in range(8):
        if i != j:
            for k in range(4):
                games.append(game(i,j))

                      
def no_same_team(g1, g2):

        if(isinstance(g2, int)):
            return True
        
        if(g1.team1() != g2.team1() and g1.team2() != g2.team1() and g1.team1() != g2.team2() and g1.team2() != g2.team2()):
            return True

        else:
            return False

def All_games_filled(day):
    if(day.game2() != None and day.game3() != None):
        teams = []
        teams.append(day.game1().team1())
        teams.append(day.game1().team2())
        teams.append(day.game2().team1())
        teams.append(day.game2().team2())
        teams.append(day.game3().team1())
        teams.append(day.game3().team2())
        if(len(teams) == len(set(teams))):
            return True
        else:
              return False  
    elif(day.game2() != None and day.game3() == None):
        teams = []
        teams.append(day.game1().team1())
        teams.append(day.game1().team2())
        teams.append(day.game2().team1())
        teams.append(day.game2().team2())
        if(len(teams) == len(set(teams))):
            return True
        else:
              return False  
    elif(day.game2() == None and day.game3() != None):
        teams = []
        teams.append(day.game1().team1())
        teams.append(day.game1().team2())
        teams.append(day.game3().team1())
        teams.append(day.game3().team2())
        if(len(teams) == len(set(teams))):
            return True
        else:
              return False  
    else:
        return True

def make_week(t):
    #set up varriables
    week = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
    days = []
    temp = []
    counter = [0,0,0,0,0,0,0,0]

    #get a pool of games for the week
    if t == 15:
        temp = games.copy()
        games.clear()
    else:
        while len(temp) != 10:
            selection = random.choice(games)
            t1 = selection.team1()
            t2 = selection.team2()
            if(counter[t1] != 3 and counter[t2] != 3):
                temp.append(selection)
                games.remove(selection)
                counter[t1] += 1
                counter[t2] += 1
        if t < 8:
            i = 0
            while len(temp) != 14  and i < len(games):
                selection = games[i]
                t1 = selection.team1()
                t2 = selection.team2()
                if(counter[t1] != 4 and counter[t2] != 4):
                    temp.append(selection)
                    games.remove(selection)
                    counter[t1] += 1
                    counter[t2] += 1
                i += 1
        else:
            i = len(games) - 1
            while len(temp) != 14 and i > 0:
                selection = games[i]
                t1 = selection.team1()
                t2 = selection.team2()
                if(counter[t1] != 4 and counter[t2] != 4):
                    temp.append(selection)
                    games.remove(selection)
                    counter[t1] += 1
                    counter[t2] += 1
                i -= 1
        
        if len(temp) < 14:
            selection = random.choice(games)
            temp.append(selection)
            games.remove(selection)

    #Put a game in each day
    for x in range(columns):
        selection = random.choice(temp)
        week[0][x] = selection
        temp.remove(selection)
    #place the 7 extra games
    while len(temp) != 0:
        test = len(temp)
        for x in range(columns):
            if(isinstance(week[1][x], int) and no_same_team(temp[0], week[0][x])):
                week[1][x] = temp[0]
                temp.remove(temp[0])
                break
        if(len(temp) == test):
            for x in range(columns):
                if(isinstance(week[2][x], int) and no_same_team(temp[0], week[0][x]) and no_same_team(temp[0], week[1][x])):
                  week[2][x] = temp[0]
                  temp.remove(temp[0])
                  break
        if(len(temp) == test):
            for x in range(columns):
                if(isinstance(week[2][x], int)):
                  week[2][x] = temp[0]
                  temp.remove(temp[0])
                  break
        
            
    #check if the days work
    current_day = 0
    for x in range(columns):
        if(isinstance(week[1][x], int)):
            if(isinstance(week[2][x], int)):
                days.append(day(week[0][x],None,None,current_day))
            else:
                days.append(day(week[0][x],None,week[2][x],current_day))
        elif(isinstance(week[2][x], int)):
            days.append(day(week[0][x],week[1][x],None,current_day))
        else:
            days.append(day(week[0][x],week[1][x],week[2][x],current_day))
        current_day += 1

    for d in days:
        if All_games_filled(d):
            E.add_constraint(d)
        else:
           E.add_constraint(~d)
    return weekp(days,t)

def example_theory():
   
   #make a schedule, computer cant seem to process 3 weeks
   sch = []
   for x in range(16):
        sch.append(make_week(x))
    
   for i in sch:
       print(i,"\n")
   print(games)
   T = E.compile()
   return T
    


if __name__ == "__main__":

    T = example_theory()
    

    print("\nSatisfiable: %s" % T.satisfiable())
    print("# Solutions: %d" % count_solutions(T))
    
